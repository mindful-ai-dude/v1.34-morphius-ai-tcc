// lib/schema/search.tsx
import { DeepPartial } from 'ai'
import { z } from 'zod'

export const searchSchema = z.object({
  query: z.string().describe('The query to search for'),
  max_results: z
    .number()
    .optional() // Make optional
    .describe('The maximum number of results to return. Default is handled by the tool execution.'),
  search_depth: z
    .enum(['basic', 'advanced']) // Use enum for specific allowed values
    .optional() // Make optional
    .describe('The depth of the search: "basic" or "advanced". Default is handled by the tool execution.'),
  include_domains: z
    .array(z.string())
    .optional() // Make optional
    .describe(
      'A list of domains to specifically include in the search results (e.g., ["example.com", "anothersite.org"]). Omit or leave empty to include all.'
    ),
  exclude_domains: z
    .array(z.string())
    .optional() // Make optional
    .describe(
      "A list of domains to specifically exclude from the search results (e.g., [\"wikipedia.org\"]). Omit or leave empty to exclude none."
    )
})

// Keep PartialInquiry if used elsewhere, otherwise it can be removed.
export type PartialInquiry = DeepPartial<typeof searchSchema>